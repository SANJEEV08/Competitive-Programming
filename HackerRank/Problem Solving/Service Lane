#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'serviceLane' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts following parameters:
#  1. INTEGER n
#  2. 2D_INTEGER_ARRAY cases
#

def serviceLane(n, cases):
    # Empty list to store the final result
    result = []
    # List which stores the extracted array elements from 'width' according to the entry & exit points
    output = []
    # Logic to extract array elements from 'width' & to store it in 'output' and then finally compute the 'min()' operation on 'output' for each test case
    
    # Looping for different cases
    for i in range(len(cases)) :
        i,j = cases[i]
        # Storing array elements according to the entry & exit points
        for k in range(i,j + 1) :
            output.append(width[k])
        # 'min()' is found on 'output'
        result.append(min(output))
        # 'output' is cleared for every iteration
        output.clear()
        
    return result
    
    
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    t = int(first_multiple_input[1])

    width = list(map(int, input().rstrip().split()))

    cases = []

    for _ in range(t):
        cases.append(list(map(int, input().rstrip().split())))

    result = serviceLane(n, cases)

    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
