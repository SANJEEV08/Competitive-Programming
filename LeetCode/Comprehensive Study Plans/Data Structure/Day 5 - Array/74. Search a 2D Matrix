import numpy as np
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        
        # Sorted Array - Think of Binary Search
        # Time Complexity - O(log n)
        
        # Function that implements Binary Search
        def binarysearch(matrix,l,r,target) :
            if r >= l :
                mid = l + (r - l) // 2
                if matrix[mid] == target :
                    return mid
                elif matrix[mid] > target :
                    return binarysearch(matrix,l,mid - 1,target)
                else :
                    return binarysearch(matrix,mid + 1,r,target)
            else :
                return -1
         
        # Converting to 'numpy array' for 'flattening'
        matrix = np.array(matrix)
        # Using 'flatten()' for 'flattening'
        matrix = matrix.flatten()
        # Initial function call
        result = binarysearch(matrix,0,len(matrix) - 1,target)
        if result != -1 :
            return True
        else :
            return False
            
        
