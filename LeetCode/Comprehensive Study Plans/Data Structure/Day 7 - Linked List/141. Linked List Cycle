# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        
        # Floyd Tortoise & Hare Algorithm -
        # Time Complexity - O(n)
        # Space Complexity - O(1)
        
        # Pointers 'slow' & 'fast' pointing to the head of the LinkedList
        slow,fast = head,head
        # Condition is that both 'fast' & 'fast.next' should not be NULL, else it has reached the end of LinkedList & there is no cycle, return False
        while fast and fast.next :
            # Increment 'slow' by 1
            slow = slow.next
            # Increment 'fast' by 2
            fast = fast.next.next
            # Cycle exists if 'slow' equals 'fast'
            if slow == fast :
                return True
            
        return False
        
