# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        # Class object of 'ListNode'
        dummy = ListNode()
        # Copy of 'dummy'
        tail = dummy
        # Looping when both 'l1' & 'l2' are not null
        # Comparing 'l1.val' & 'l2.val'
        while l1 and l2 :
            if l1.val < l2.val :
                tail.next = l1
                l1 = l1.next
                tail = tail.next
            else :
                tail.next = l2
                l2 = l2.next
                tail = tail.next
            
        # Satisfies cases where length of l1 != length of l2       
        if l1 :
            tail.next = l1
            l1 = l1.next
            tail = tail.next
        elif l2 :
            tail.next = l2
            l2 = l2.next
            tail = tail.next
            
        return dummy.next
            
                
        
