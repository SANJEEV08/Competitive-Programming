from collections import Counter
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        # Using 'Counter()' to find frequency of each element in the string
        ransomNote = dict(Counter(ransomNote))
        # Using 'Counter()' to find frequency of each element in the string
        magazine = dict(Counter(magazine))
        # Variable to keep track of whether 'ransomNote' can be formed from 'magazine'
        count = 0
        # Looping through the keys of 'ransomNote', comparing ransomNote[key] & magazine[key]
        for key in ransomNote :
            try :
                if ransomNote.get(key) <= magazine.get(key) :
                    count = count + 1
                else :
                    count = 0
                    break
            except :
                count = 0
                break
        # Conditions for returning 'True' & 'False'       
        if count != 0 :
            return True
        else :
            return False
        
        
        
