class MyQueue:
    
    # Time Complexity - 
    # 1. push() - O(1)
    # 2. pop() - O(1) amortized
    # 3. peek() - O(1) amortized
    
    # Space Complexity - O(2N)

    def __init__(self):
        
        # Assigning 2 stacks for implementation
        self.input = []
        self.output = []
        

    def push(self, x: int) -> None:
        
        # Appending to the 'input' list
        self.input.append(x)
        

    def pop(self) -> int:
        
        # If 'output' list is not empty, 'pop()' directly
        if self.output :
            return self.output.pop()
        # If 'output' list is empty, transfer contents of 'input' list to 'output' list & then 'pop()' from 'output'
        else :
            while self.input :
                self.output.append(self.input[-1])
                self.input.pop()
                
            return self.output.pop()
        

    def peek(self) -> int:
        
        # If 'output' list is not empty, 'top()' directly        
        if self.output :
            return self.output[-1]
        # If 'output' list is empty, transfer contents of 'input' list to 'output' list & then 'top()' from 'output'
        else :
            while self.input :
                self.output.append(self.input[-1])
                self.input.pop()
                
            return self.output[-1]
        

    def empty(self) -> bool:
        
        # Checking if the queue is empty or not
        if self.input or self.output :
            return False 
        else :
            return True
        


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()
